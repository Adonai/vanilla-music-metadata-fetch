plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.github.triplet.play' version '2.3.0'
}

import static org.apache.tools.ant.taskdefs.condition.Os.*

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.kanedias.vanilla.metadata"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 5
        versionName "1.0.4"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file('misc/signing.keystore')
            storePassword System.getenv('SIGNING_KEYSTORE_PASSWORD')
            keyAlias 'release-key'
            keyPassword System.getenv('RELEASE_KEY_PASSWORD')
        }
    }

    buildTypes {
        debug {}

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            useProguard false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            universalApk true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["universal": 0, "armeabi-v7a": 1, "arm64-v8a": 2, "x86": 3, "x86_64": 4]
            int abiVersionCode = versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI) ?: "universal")
            output.versionCodeOverride = abiVersionCode + android.defaultConfig.versionCode * 10
        }
    }
}

task populateChangelog {
    doLast {
        def prevTag = ['git',  'describe', '--tags', '--abbrev=0', 'HEAD~'].execute()
        prevTag.waitFor()
        def log = ['git', 'log', '--format=- %s (%an)', "${prevTag.in.readLines().first()}..HEAD"].execute()
        log.waitFor()

        def cleanup = ['git', 'checkout', 'app/src/main/play/release-notes'].execute()
        cleanup.waitFor()
        println cleanup.err.text

        def changelog = file("src/main/play/release-notes/en-US/default.txt")
        changelog.text += "\n" + log.in.text
    }
}

if (isFamily(FAMILY_UNIX)) {
    publish.dependsOn populateChangelog
}


play {
    serviceAccountCredentials = file("misc/android-publisher-account.json")
    track = 'production'
}

dependencies {
    implementation 'com.github.vanilla-music:vanilla-music-plugin-commons:1.0.3' // SAF storage access utilities
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"      // Kotlin language support
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"         // Kotlin coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1"      // Kotlin UI context
    implementation 'androidx.core:core:1.0.2'                                    // Android FileProvider
    implementation 'com.github.QuickLyric:fpcalc-android:1.0.2b'                 // convert audiofile to fingerprint
    implementation 'com.google.code.gson:gson:2.8.5'                             // Google JSON ORM library
}
